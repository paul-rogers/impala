# Right outer tests
#
# Right outer
# |join| = |orders| = 1.5M
select c.c_custkey, o.o_orderkey
from tpch.customer c
right outer join tpch.orders o on c.c_custkey = o.o_custkey
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [LEFT OUTER JOIN]
|  hash predicates: o.o_custkey = c.c_custkey
|  row-size=24B cardinality=1.50M
|
|--00:SCAN HDFS [tpch.customer c]
|     partitions=1/1 files=1 size=23.08MB row-size=8B cardinality=150.00K
|
01:SCAN HDFS [tpch.orders o]
   partitions=1/1 files=1 size=162.56MB row-size=16B cardinality=1.50M
====
# Right outer that is the inverse of a left-outer test
# |join| = |orders| = 1.5M
select c.c_custkey, o.o_orderkey
from tpch.orders o
right outer join tpch.customer c on c.c_custkey = o.o_custkey
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [RIGHT OUTER JOIN]
|  hash predicates: o.o_custkey = c.c_custkey
|  runtime filters: RF000 <- c.c_custkey
|  row-size=24B cardinality=1.50M
|
|--01:SCAN HDFS [tpch.customer c]
|     partitions=1/1 files=1 size=23.08MB row-size=8B cardinality=150.00K
|
00:SCAN HDFS [tpch.orders o]
   partitions=1/1 files=1 size=162.56MB row-size=16B cardinality=1.50M
   runtime filters: RF000 -> o.o_custkey
====
# Right outer join with zero-sized right table
select o.id, i.id
from functional.alltypestiny i
right outer join functional.alltypesnopart o using (id)
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [RIGHT OUTER JOIN]
|  hash predicates: i.id = o.id
|  runtime filters: RF000 <- o.id
|  row-size=8B cardinality=0
|
|--01:SCAN HDFS [functional.alltypesnopart o]
|     partitions=1/1 files=0 size=0B row-size=4B cardinality=0
|
00:SCAN HDFS [functional.alltypestiny i]
   partitions=4/4 files=4 size=460B row-size=4B cardinality=8
   runtime filters: RF000 -> i.id
====
# Right outer join with zero-sized left table
select o.id, i.id
from functional.alltypesnopart i
right outer join functional.alltypestiny o using (id)
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [LEFT OUTER JOIN]
|  hash predicates: o.id = i.id
|  row-size=8B cardinality=8
|
|--00:SCAN HDFS [functional.alltypesnopart i]
|     partitions=1/1 files=0 size=0B row-size=4B cardinality=0
|
01:SCAN HDFS [functional.alltypestiny o]
   partitions=4/4 files=4 size=460B row-size=4B cardinality=8
====
# Right outer with left predicate
# |join| = |customers'| * avg. orders per customer = 15
# predicate removes null rows, so the right outer is a no-op
# Using wrong NDV so answer is 10. See IMPALA-8045, Outer Join section
select c.c_custkey, o.o_orderkey
from tpch.customer c
right outer join tpch.orders o on c.c_custkey = o.o_custkey
where c.c_name = 'foo'
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [LEFT OUTER JOIN]
|  hash predicates: o.o_custkey = c.c_custkey
|  other predicates: c.c_name = 'foo'
|  row-size=54B cardinality=10
|
|--00:SCAN HDFS [tpch.customer c]
|     partitions=1/1 files=1 size=23.08MB row-size=38B cardinality=1
|     predicates: c.c_name = 'foo'
|
01:SCAN HDFS [tpch.orders o]
   partitions=1/1 files=1 size=162.56MB row-size=16B cardinality=1.50M
====
# Right outer with broad left predicate
# |join| = |customers'| * avg. orders per customer = 150K/3 * 15 = 750K
# predicate removes null rows, so the right outer is a no-op
# Bug: Using wrong NDV, so get answer of 500K, see IMPALA-8045
select c.c_custkey, o.o_orderkey
from tpch.customer c
right outer join tpch.orders o on c.c_custkey = o.o_custkey
where c.c_name < 'foo'
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [LEFT OUTER JOIN]
|  hash predicates: o.o_custkey = c.c_custkey
|  other predicates: c.c_name < 'foo'
|  row-size=54B cardinality=495.00K
|
|--00:SCAN HDFS [tpch.customer c]
|     partitions=1/1 files=1 size=23.08MB row-size=38B cardinality=49.50K
|     predicates: c.c_name < 'foo'
|
01:SCAN HDFS [tpch.orders o]
   partitions=1/1 files=1 size=162.56MB row-size=16B cardinality=1.50M
====
# Right outer with right predicate
# |clerk| = 1K
# sel(clerk = 'foo') = 1/1000
# |orders'| = |orders| * sel(clerk = 'foo') = 1.5K
# |join| = |orders'| = 1.5K
select c.c_custkey, o.o_orderkey
from tpch.customer c
right outer join tpch.orders o on c.c_custkey = o.o_custkey
where o.o_clerk = 'foo'
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [RIGHT OUTER JOIN]
|  hash predicates: c.c_custkey = o.o_custkey
|  runtime filters: RF000 <- o.o_custkey
|  row-size=51B cardinality=1.49K
|
|--01:SCAN HDFS [tpch.orders o]
|     partitions=1/1 files=1 size=162.56MB row-size=43B cardinality=1.49K
|     predicates: o.o_clerk = 'foo'
|
00:SCAN HDFS [tpch.customer c]
   partitions=1/1 files=1 size=23.08MB row-size=8B cardinality=150.00K
   runtime filters: RF000 -> c.c_custkey
====
# Right outer with broad right predicate
# |join| = |orders| * sel(left pred) = 500K
select c.c_custkey, o.o_orderkey
from tpch.customer c
right outer join tpch.orders o on c.c_custkey = o.o_custkey
where o.o_clerk < 'foo'
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [LEFT OUTER JOIN]
|  hash predicates: o.o_custkey = c.c_custkey
|  row-size=51B cardinality=495.00K
|
|--00:SCAN HDFS [tpch.customer c]
|     partitions=1/1 files=1 size=23.08MB row-size=8B cardinality=150.00K
|
01:SCAN HDFS [tpch.orders o]
   partitions=1/1 files=1 size=162.56MB row-size=43B cardinality=495.00K
   predicates: o.o_clerk < 'foo'
====
# Right outer with join predicate
# |join| = |orders| * sel(pred) = 150K
select c.c_custkey, o.o_orderkey
from tpch.customer c
right outer join tpch.orders o on c.c_custkey = o.o_custkey
where c.c_nationkey + o.o_shippriority = 10
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [LEFT OUTER JOIN]
|  hash predicates: o.o_custkey = c.c_custkey
|  other predicates: c.c_nationkey + o.o_shippriority = 10
|  row-size=30B cardinality=150.00K
|
|--00:SCAN HDFS [tpch.customer c]
|     partitions=1/1 files=1 size=23.08MB row-size=10B cardinality=150.00K
|
01:SCAN HDFS [tpch.orders o]
   partitions=1/1 files=1 size=162.56MB row-size=20B cardinality=1.50M
====
# Right outer with broad join predicate
# sel(c.c_nationkey + o.o_shippriority < 10) = 0.33
# |join| = |orders| * sel(pred) = 500K
select c.c_custkey, o.o_orderkey
from tpch.customer c
right outer join tpch.orders o on c.c_custkey = o.o_custkey
where c.c_nationkey + o.o_shippriority < 10
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [LEFT OUTER JOIN]
|  hash predicates: o.o_custkey = c.c_custkey
|  other predicates: c.c_nationkey + o.o_shippriority < 10
|  row-size=30B cardinality=495.00K
|
|--00:SCAN HDFS [tpch.customer c]
|     partitions=1/1 files=1 size=23.08MB row-size=10B cardinality=150.00K
|
01:SCAN HDFS [tpch.orders o]
   partitions=1/1 files=1 size=162.56MB row-size=20B cardinality=1.50M
====
# Right outer with left, right and join predicate
# |customers'| = |customers| * sel(left pred) = 50K
# |orders'| = |orders| * sel(right pred) = 500K
# |join| = |orders'| * sel(join pred) * sel(children) = 16K
# sel(children) = 0.33
# The c.c_name < 'foo' is reapplied after the join
select c.c_custkey, o.o_orderkey
from tpch.customer c
right outer join tpch.orders o on c.c_custkey = o.o_custkey
where c.c_nationkey + o.o_shippriority = 10
  and o.o_clerk < 'foo'
  and c.c_name < 'foo'
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [LEFT OUTER JOIN]
|  hash predicates: o.o_custkey = c.c_custkey
|  other predicates: c.c_nationkey + o.o_shippriority = 10, c.c_name < 'foo'
|  row-size=87B cardinality=16.34K
|
|--00:SCAN HDFS [tpch.customer c]
|     partitions=1/1 files=1 size=23.08MB row-size=40B cardinality=49.50K
|     predicates: c.c_name < 'foo'
|
01:SCAN HDFS [tpch.orders o]
   partitions=1/1 files=1 size=162.56MB row-size=47B cardinality=495.00K
   predicates: o.o_clerk < 'foo'
====
# Left outer tests
#
# Left outer
# |join| = |orders| = 1.5M
select c.c_custkey, o.o_orderkey
from tpch.customer c
left outer join tpch.orders o on c.c_custkey = o.o_custkey
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [RIGHT OUTER JOIN]
|  hash predicates: o.o_custkey = c.c_custkey
|  runtime filters: RF000 <- c.c_custkey
|  row-size=24B cardinality=1.50M
|
|--00:SCAN HDFS [tpch.customer c]
|     partitions=1/1 files=1 size=23.08MB row-size=8B cardinality=150.00K
|
01:SCAN HDFS [tpch.orders o]
   partitions=1/1 files=1 size=162.56MB row-size=16B cardinality=1.50M
   runtime filters: RF000 -> o.o_custkey
====
# Left outer join with zero-sized right table
select o.id, i.id
from functional.alltypestiny i
left outer join functional.alltypesnopart o using (id)
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [LEFT OUTER JOIN]
|  hash predicates: i.id = o.id
|  row-size=8B cardinality=8
|
|--01:SCAN HDFS [functional.alltypesnopart o]
|     partitions=1/1 files=0 size=0B row-size=4B cardinality=0
|
00:SCAN HDFS [functional.alltypestiny i]
   partitions=4/4 files=4 size=460B row-size=4B cardinality=8
====
# Left outer join which is the inverse of the right outer test
# |join| = |orders| = 1.5M
select c.c_custkey, o.o_orderkey
from tpch.orders o
left outer join tpch.customer c on c.c_custkey = o.o_custkey
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [LEFT OUTER JOIN]
|  hash predicates: o.o_custkey = c.c_custkey
|  row-size=24B cardinality=1.50M
|
|--01:SCAN HDFS [tpch.customer c]
|     partitions=1/1 files=1 size=23.08MB row-size=8B cardinality=150.00K
|
00:SCAN HDFS [tpch.orders o]
   partitions=1/1 files=1 size=162.56MB row-size=16B cardinality=1.50M
====
# Left outer join with zero-sized left table
select o.id, i.id
from functional.alltypesnopart i
left outer join functional.alltypestiny o using (id)
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [RIGHT OUTER JOIN]
|  hash predicates: o.id = i.id
|  runtime filters: RF000 <- i.id
|  row-size=8B cardinality=0
|
|--00:SCAN HDFS [functional.alltypesnopart i]
|     partitions=1/1 files=0 size=0B row-size=4B cardinality=0
|
01:SCAN HDFS [functional.alltypestiny o]
   partitions=4/4 files=4 size=460B row-size=4B cardinality=8
   runtime filters: RF000 -> o.id
====
# Left outer with left predicate
# |customers'| = |customers| * sel(pred) = 50K
# |join| = |customers'| * avg. orders per customer = 50 * 15 = 750K
# (Skipping some steps in the math.)
select c.c_custkey, o.o_orderkey
from tpch.customer c
left outer join tpch.orders o on c.c_custkey = o.o_custkey
where c.c_name < 'foo'
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [RIGHT OUTER JOIN]
|  hash predicates: o.o_custkey = c.c_custkey
|  runtime filters: RF000 <- c.c_custkey
|  row-size=54B cardinality=754.65K
|
|--00:SCAN HDFS [tpch.customer c]
|     partitions=1/1 files=1 size=23.08MB row-size=38B cardinality=49.50K
|     predicates: c.c_name < 'foo'
|
01:SCAN HDFS [tpch.orders o]
   partitions=1/1 files=1 size=162.56MB row-size=16B cardinality=1.50M
   runtime filters: RF000 -> o.o_custkey
====
# Left outer with right predicate
# The filter on the right table works with non-null values.
# It is applied again after the (outer) join, and will remove any
# null rows created via the outer join (undoing the join.)
# While this may be a meaninless query, it is an interesting odd test case.
# The meaning is thus to match customers who have orders.
# |join| = |orders'| = |orders| * sel(pred)
#        = 1.5M * 0.33 = 500K
# Bug: duplicated predicate causes an unwanted second 1/3 reduction.
# See IMPALA-8045
select c.c_custkey, o.o_orderkey
from tpch.customer c
left outer join tpch.orders o on c.c_custkey = o.o_custkey
where o.o_clerk < 'foo'
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [RIGHT OUTER JOIN]
|  hash predicates: o.o_custkey = c.c_custkey
|  other predicates: o.o_clerk < 'foo'
|  runtime filters: RF000 <- c.c_custkey
|  row-size=51B cardinality=163.35K
|
|--00:SCAN HDFS [tpch.customer c]
|     partitions=1/1 files=1 size=23.08MB row-size=8B cardinality=150.00K
|
01:SCAN HDFS [tpch.orders o]
   partitions=1/1 files=1 size=162.56MB row-size=43B cardinality=495.00K
   predicates: o.o_clerk < 'foo'
   runtime filters: RF000 -> o.o_custkey
====
# Left outer with right predicate
# Predicate matches both right columns and the generated, null
# outer join rows.
# Bug: Invalid IS NULL logic uses orders null count to estimate output of outer
# join. Since orders has no nulls, we incorrectly assume the outer join does not either.
# See IMPALA-8050
select c.c_custkey, o.o_orderkey
from tpch.customer c
left outer join tpch.orders o on c.c_custkey = o.o_custkey
where o.o_clerk is null
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [RIGHT OUTER JOIN]
|  hash predicates: o.o_custkey = c.c_custkey
|  other predicates: o.o_clerk IS NULL
|  runtime filters: RF000 <- c.c_custkey
|  row-size=51B cardinality=0
|
|--00:SCAN HDFS [tpch.customer c]
|     partitions=1/1 files=1 size=23.08MB row-size=8B cardinality=150.00K
|
01:SCAN HDFS [tpch.orders o]
   partitions=1/1 files=1 size=162.56MB row-size=43B cardinality=1.50M
   runtime filters: RF000 -> o.o_custkey
====
# Left outer with join predicate
# sel(c.c_nationkey + o.o_shippriority = 10) = 0.1 (guess)
# |join| = |orders| * sel(pred) = 15K
select c.c_custkey, o.o_orderkey
from tpch.customer c
right outer join tpch.orders o on c.c_custkey = o.o_custkey
where c.c_nationkey + o.o_shippriority = 10
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [LEFT OUTER JOIN]
|  hash predicates: o.o_custkey = c.c_custkey
|  other predicates: c.c_nationkey + o.o_shippriority = 10
|  row-size=30B cardinality=150.00K
|
|--00:SCAN HDFS [tpch.customer c]
|     partitions=1/1 files=1 size=23.08MB row-size=10B cardinality=150.00K
|
01:SCAN HDFS [tpch.orders o]
   partitions=1/1 files=1 size=162.56MB row-size=20B cardinality=1.50M
====
# As above, but with two predicates since the estimate above happens
# to also be the customer table cardinality.
# Remember exponential back-off
# |join| = 0.31 above, 0.031 net, or ~45K
select c.c_custkey, o.o_orderkey
from tpch.customer c
right outer join tpch.orders o on c.c_custkey = o.o_custkey
where c.c_nationkey + o.o_shippriority = 10
  and c.c_nationkey * o.o_shippriority = 100
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [LEFT OUTER JOIN]
|  hash predicates: o.o_custkey = c.c_custkey
|  other predicates: c.c_nationkey * o.o_shippriority = 100, c.c_nationkey + o.o_shippriority = 10
|  row-size=30B cardinality=47.43K
|
|--00:SCAN HDFS [tpch.customer c]
|     partitions=1/1 files=1 size=23.08MB row-size=10B cardinality=150.00K
|
01:SCAN HDFS [tpch.orders o]
   partitions=1/1 files=1 size=162.56MB row-size=20B cardinality=1.50M
====
# Left outer with broad join predicate
# |join| = |orders| * sel(pred) = 500K
# (Skipping some math steps.)
select c.c_custkey, o.o_orderkey
from tpch.customer c
right outer join tpch.orders o on c.c_custkey = o.o_custkey
where c.c_nationkey + o.o_shippriority < 10
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [LEFT OUTER JOIN]
|  hash predicates: o.o_custkey = c.c_custkey
|  other predicates: c.c_nationkey + o.o_shippriority < 10
|  row-size=30B cardinality=495.00K
|
|--00:SCAN HDFS [tpch.customer c]
|     partitions=1/1 files=1 size=23.08MB row-size=10B cardinality=150.00K
|
01:SCAN HDFS [tpch.orders o]
   partitions=1/1 files=1 size=162.56MB row-size=20B cardinality=1.50M
====
# Left outer with broad join predicate and right table predicate
# sel(c.c_nationkey + o.o_shippriority < 10) = 0.33
# |customers'| = |customers| * 0.33 = 50K
# |orders'| = |orders| * 0.33 = 500K
# |join| = |orders'| * sel(pred) * sel(customers)
#        = 500K * 0.1 * 0.33 = 16.5K
# Bug: IMPALA-8045: join predicates counted twice
select c.c_custkey, o.o_orderkey
from tpch.customer c
left outer join tpch.orders o on c.c_custkey = o.o_custkey
where c.c_nationkey + o.o_shippriority = 10
  and o.o_clerk < 'foo'
  and c.c_name < 'foo'
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [RIGHT OUTER JOIN]
|  hash predicates: o.o_custkey = c.c_custkey
|  other predicates: c.c_nationkey + o.o_shippriority = 10, o.o_clerk < 'foo'
|  runtime filters: RF000 <- c.c_custkey
|  row-size=87B cardinality=16.34K
|
|--00:SCAN HDFS [tpch.customer c]
|     partitions=1/1 files=1 size=23.08MB row-size=40B cardinality=49.50K
|     predicates: c.c_name < 'foo'
|
01:SCAN HDFS [tpch.orders o]
   partitions=1/1 files=1 size=162.56MB row-size=47B cardinality=495.00K
   predicates: o.o_clerk < 'foo'
   runtime filters: RF000 -> o.o_custkey
====
# Join with a table that has no stats and zero rows.
# The zero rows trumps the stats.
# Zero-row table is on the build side, |join| = 0
select a.int_col, b.int_col
from functional.alltypesagg a, functional.alltypesnopart b
where a.id = b.id
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: a.id = b.id
|  runtime filters: RF000 <- b.id
|  row-size=16B cardinality=0
|
|--01:SCAN HDFS [functional.alltypesnopart b]
|     partitions=1/1 files=0 size=0B row-size=8B cardinality=0
|
00:SCAN HDFS [functional.alltypesagg a]
   partitions=11/11 files=11 size=814.73KB row-size=8B cardinality=11.00K
   runtime filters: RF000 -> a.id
====
# Adding table and join filters should not affect the result.
select a.int_col, b.int_col
from functional.alltypesagg a, functional.alltypesnopart b
where a.id = b.id
  and a.smallint_col = 10
  and b.smallint_col = 20
  and a.int_col + b.int_col > 30
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: a.id = b.id
|  other predicates: a.int_col + b.int_col > 30
|  runtime filters: RF000 <- b.id
|  row-size=20B cardinality=0
|
|--01:SCAN HDFS [functional.alltypesnopart b]
|     partitions=1/1 files=0 size=0B row-size=10B cardinality=0
|     predicates: b.smallint_col = 20
|
00:SCAN HDFS [functional.alltypesagg a]
   partitions=11/11 files=11 size=814.73KB row-size=10B cardinality=113
   predicates: a.smallint_col = 10
   runtime filters: RF000 -> a.id
====
# Join on a computed column
# Assumes Cartesial product * 0.1
# |join| = 11K * 7K * 0.1 = 7M
select a.id, b.id
from functional.alltypes a, functional.alltypesagg b
where a.id = b.id + b.int_col
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: b.id + b.int_col = a.id
|  runtime filters: RF000 <- a.id
|  row-size=12B cardinality=8.03M
|
|--00:SCAN HDFS [functional.alltypes a]
|     partitions=24/24 files=24 size=478.45KB row-size=4B cardinality=7.30K
|
01:SCAN HDFS [functional.alltypesagg b]
   partitions=11/11 files=11 size=814.73KB row-size=8B cardinality=11.00K
   runtime filters: RF000 -> b.id + b.int_col
====
