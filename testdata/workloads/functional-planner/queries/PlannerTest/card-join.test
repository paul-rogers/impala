# Join cardinality tests
# Each has a qualitative description of the quantitative math
#
# Simplest join: Cartesian product
# card = |T1| * |T2|
select m.id, d.id
from functional.alltypestiny m,
     functional.alltypessmall d
---- PLAN
PLAN-ROOT SINK
|
02:NESTED LOOP JOIN [CROSS JOIN]
|  row-size=8B cardinality=800
|
|--00:SCAN HDFS [functional.alltypestiny m]
|     partitions=4/4 files=4 size=460B row-size=4B cardinality=8
|
01:SCAN HDFS [functional.alltypessmall d]
   partitions=4/4 files=4 size=6.32KB row-size=4B cardinality=100
====
# Simplest M:1 join, join between a master table (M) and a detail table (D)
# (small):(tiny)
# |join| = |D|
select m.id, d.id
from functional.alltypestiny m,
     functional.alltypessmall d
where m.id = d.id
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: d.id = m.id
|  runtime filters: RF000 <- m.id
|  row-size=8B cardinality=8
|
|--00:SCAN HDFS [functional.alltypestiny m]
|     partitions=4/4 files=4 size=460B row-size=4B cardinality=8
|
01:SCAN HDFS [functional.alltypessmall d]
   partitions=4/4 files=4 size=6.32KB row-size=4B cardinality=100
   runtime filters: RF000 -> d.id
====
# Same, but reverse WHERE order
select m.id, d.id
from functional.alltypestiny m,
     functional.alltypessmall d
where d.id = m.id
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: d.id = m.id
|  runtime filters: RF000 <- m.id
|  row-size=8B cardinality=8
|
|--00:SCAN HDFS [functional.alltypestiny m]
|     partitions=4/4 files=4 size=460B row-size=4B cardinality=8
|
01:SCAN HDFS [functional.alltypessmall d]
   partitions=4/4 files=4 size=6.32KB row-size=4B cardinality=100
   runtime filters: RF000 -> d.id
====
# Same, but use JOIN ... ON
select m.id, d.id
from functional.alltypestiny m
join functional.alltypessmall d on m.id = d.id
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: d.id = m.id
|  runtime filters: RF000 <- m.id
|  row-size=8B cardinality=8
|
|--00:SCAN HDFS [functional.alltypestiny m]
|     partitions=4/4 files=4 size=460B row-size=4B cardinality=8
|
01:SCAN HDFS [functional.alltypessmall d]
   partitions=4/4 files=4 size=6.32KB row-size=4B cardinality=100
   runtime filters: RF000 -> d.id
====
# Same, reverse ON order
select m.id, d.id
from functional.alltypestiny m
join functional.alltypessmall d on d.id = m.id
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: d.id = m.id
|  runtime filters: RF000 <- m.id
|  row-size=8B cardinality=8
|
|--00:SCAN HDFS [functional.alltypestiny m]
|     partitions=4/4 files=4 size=460B row-size=4B cardinality=8
|
01:SCAN HDFS [functional.alltypessmall d]
   partitions=4/4 files=4 size=6.32KB row-size=4B cardinality=100
   runtime filters: RF000 -> d.id
====
# Same, but reverse FROM order
select m.id, d.id
from functional.alltypessmall d,
     functional.alltypestiny m
where m.id = d.id
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: d.id = m.id
|  runtime filters: RF000 <- m.id
|  row-size=8B cardinality=8
|
|--01:SCAN HDFS [functional.alltypestiny m]
|     partitions=4/4 files=4 size=460B row-size=4B cardinality=8
|
00:SCAN HDFS [functional.alltypessmall d]
   partitions=4/4 files=4 size=6.32KB row-size=4B cardinality=100
   runtime filters: RF000 -> d.id
====
# Same, but use JOIN ... ON
select m.id, d.id
from functional.alltypessmall m
join functional.alltypestiny d on m.id = d.id
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: m.id = d.id
|  runtime filters: RF000 <- d.id
|  row-size=8B cardinality=8
|
|--01:SCAN HDFS [functional.alltypestiny d]
|     partitions=4/4 files=4 size=460B row-size=4B cardinality=8
|
00:SCAN HDFS [functional.alltypessmall m]
   partitions=4/4 files=4 size=6.32KB row-size=4B cardinality=100
   runtime filters: RF000 -> m.id
====
# Similar, but with big tables
# |M| = |customer| = 150K
# |M.pk| = |customer.c_custkey| = |customer| = 150K
# |D| = |orders| = 1.5M
# |D.fk| = |orders.o_custkey| = 100K
# |join| = |D| = |orders|
select m.c_custkey, d.o_custkey
from tpch.customer m,
     tpch.orders d
where m.c_custkey = d.o_custkey
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: d.o_custkey = m.c_custkey
|  runtime filters: RF000 <- m.c_custkey
|  row-size=16B cardinality=1.50M
|
|--00:SCAN HDFS [tpch.customer m]
|     partitions=1/1 files=1 size=23.08MB row-size=8B cardinality=150.00K
|
01:SCAN HDFS [tpch.orders d]
   partitions=1/1 files=1 size=162.56MB row-size=8B cardinality=1.50M
   runtime filters: RF000 -> d.o_custkey
====
# Selective master filtering
# |join| = |D|/|D.fk| = 15
select m.c_custkey, d.o_custkey
from tpch.customer m,
     tpch.orders d
where m.c_custkey = d.o_custkey
  and m.c_name = 'foo'
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: d.o_custkey = m.c_custkey
|  runtime filters: RF000 <- m.c_custkey
|  row-size=46B cardinality=15
|
|--00:SCAN HDFS [tpch.customer m]
|     partitions=1/1 files=1 size=23.08MB row-size=38B cardinality=1
|     predicates: m.c_name = 'foo'
|
01:SCAN HDFS [tpch.orders d]
   partitions=1/1 files=1 size=162.56MB row-size=8B cardinality=1.50M
   runtime filters: RF000 -> d.o_custkey
====
# Selective master filtering, column common with detail
# |join| = |D|/|D.fk| = 15
select m.c_custkey, d.o_custkey
from tpch.customer m,
     tpch.orders d
where m.c_custkey = d.o_custkey
  and m.c_custkey = 10
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: d.o_custkey = m.c_custkey
|  runtime filters: RF000 <- m.c_custkey
|  row-size=16B cardinality=15
|
|--00:SCAN HDFS [tpch.customer m]
|     partitions=1/1 files=1 size=23.08MB row-size=8B cardinality=1
|     predicates: m.c_custkey = 10
|
01:SCAN HDFS [tpch.orders d]
   partitions=1/1 files=1 size=162.56MB row-size=8B cardinality=15
   predicates: d.o_custkey = 10
   runtime filters: RF000 -> d.o_custkey
====
# Selective detail filtering
# Card = 1: one detail record finds its master record
select m.c_custkey, d.o_custkey
from tpch.customer m,
     tpch.orders d
where m.c_custkey = d.o_custkey
  and d.o_orderkey = 10
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: m.c_custkey = d.o_custkey
|  runtime filters: RF000 <- d.o_custkey
|  row-size=24B cardinality=1
|
|--01:SCAN HDFS [tpch.orders d]
|     partitions=1/1 files=1 size=162.56MB row-size=16B cardinality=1
|     predicates: d.o_orderkey = 10
|
00:SCAN HDFS [tpch.customer m]
   partitions=1/1 files=1 size=23.08MB row-size=8B cardinality=150.00K
   runtime filters: RF000 -> m.c_custkey
====
# Broad master filtering
# |M'| = |M| * 0.33 = 50K
# Each master finds all its details
# |join|= |M'| * |D|/|D.fk| = 50K * 15 = 750K
# Though |M.pk| > |D.fk|, we assume that filtering eliminated the unmatched keys
select m.c_custkey, d.o_custkey
from tpch.customer m,
     tpch.orders d
where m.c_custkey = d.o_custkey
  and m.c_name < 'foo'
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: d.o_custkey = m.c_custkey
|  runtime filters: RF000 <- m.c_custkey
|  row-size=46B cardinality=754.65K
|
|--00:SCAN HDFS [tpch.customer m]
|     partitions=1/1 files=1 size=23.08MB row-size=38B cardinality=49.50K
|     predicates: m.c_name < 'foo'
|
01:SCAN HDFS [tpch.orders d]
   partitions=1/1 files=1 size=162.56MB row-size=8B cardinality=1.50M
   runtime filters: RF000 -> d.o_custkey
====
# Broad master filtering, column common with detail
# |D'| = |D| * 0.33 = 500K
# Each detail finds its master
# |join| = |D'| = 500K
select m.c_custkey, d.o_custkey
from tpch.customer m,
     tpch.orders d
where m.c_custkey = d.o_custkey
  and m.c_custkey < 1234
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: d.o_custkey = m.c_custkey
|  runtime filters: RF000 <- m.c_custkey
|  row-size=16B cardinality=495.00K
|
|--00:SCAN HDFS [tpch.customer m]
|     partitions=1/1 files=1 size=23.08MB row-size=8B cardinality=49.50K
|     predicates: m.c_custkey < 1234
|
01:SCAN HDFS [tpch.orders d]
   partitions=1/1 files=1 size=162.56MB row-size=8B cardinality=495.00K
   predicates: d.o_custkey < 1234
   runtime filters: RF000 -> d.o_custkey
====
# Broad detail filtering
# |D'| = |D| * 0.33 = 500K
# Every detail finds its master
# Card = 500K
select m.c_custkey, d.o_custkey
from tpch.customer m,
     tpch.orders d
where m.c_custkey = d.o_custkey
  and d.o_orderkey < 1234
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: d.o_custkey = m.c_custkey
|  runtime filters: RF000 <- m.c_custkey
|  row-size=24B cardinality=495.00K
|
|--00:SCAN HDFS [tpch.customer m]
|     partitions=1/1 files=1 size=23.08MB row-size=8B cardinality=150.00K
|
01:SCAN HDFS [tpch.orders d]
   partitions=1/1 files=1 size=162.56MB row-size=16B cardinality=495.00K
   predicates: d.o_orderkey < 1234
   runtime filters: RF000 -> d.o_custkey
====
# Selective filtering on both sides
# |D'| = 1
# |C'| = 1
# |D' >< C'| = 0 or 1, depending whether we're lucky
select m.c_custkey, d.o_custkey
from tpch.customer m,
     tpch.orders d
where m.c_custkey = d.o_custkey
  and m.c_name = 'foo'
  and d.o_orderkey = 10
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: m.c_custkey = d.o_custkey
|  runtime filters: RF000 <- d.o_custkey
|  row-size=54B cardinality=1
|
|--01:SCAN HDFS [tpch.orders d]
|     partitions=1/1 files=1 size=162.56MB row-size=16B cardinality=1
|     predicates: d.o_orderkey = 10
|
00:SCAN HDFS [tpch.customer m]
   partitions=1/1 files=1 size=23.08MB row-size=38B cardinality=1
   predicates: m.c_name = 'foo'
   runtime filters: RF000 -> m.c_custkey
====
# Correlated filtering on master
# |join| = |D| / |D.fk|
select m.c_custkey, d.o_custkey
from tpch.customer m,
     tpch.orders d
where m.c_custkey = d.o_custkey
  and m.c_custkey = 10
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: d.o_custkey = m.c_custkey
|  runtime filters: RF000 <- m.c_custkey
|  row-size=16B cardinality=15
|
|--00:SCAN HDFS [tpch.customer m]
|     partitions=1/1 files=1 size=23.08MB row-size=8B cardinality=1
|     predicates: m.c_custkey = 10
|
01:SCAN HDFS [tpch.orders d]
   partitions=1/1 files=1 size=162.56MB row-size=8B cardinality=15
   predicates: d.o_custkey = 10
   runtime filters: RF000 -> d.o_custkey
====
# Correlated filtering on detail
# |join| = |D| / |D.fk|
select m.c_custkey, d.o_custkey
from tpch.customer m,
     tpch.orders d
where m.c_custkey = d.o_custkey
  and d.o_custkey = 10
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: d.o_custkey = m.c_custkey
|  runtime filters: RF000 <- m.c_custkey
|  row-size=16B cardinality=15
|
|--00:SCAN HDFS [tpch.customer m]
|     partitions=1/1 files=1 size=23.08MB row-size=8B cardinality=1
|     predicates: m.c_custkey = 10
|
01:SCAN HDFS [tpch.orders d]
   partitions=1/1 files=1 size=162.56MB row-size=8B cardinality=15
   predicates: d.o_custkey = 10
   runtime filters: RF000 -> d.o_custkey
====
# Redundant correlated filtering on both sides
# Same as above case internally
select m.c_custkey, d.o_custkey
from tpch.customer m,
     tpch.orders d
where m.c_custkey = d.o_custkey
  and m.c_name = 'foo'
  and m.c_custkey = 10
  and d.o_custkey = 10
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: d.o_custkey = m.c_custkey
|  runtime filters: RF000 <- m.c_custkey
|  row-size=46B cardinality=15
|
|--00:SCAN HDFS [tpch.customer m]
|     partitions=1/1 files=1 size=23.08MB row-size=38B cardinality=1
|     predicates: m.c_custkey = 10, m.c_name = 'foo'
|
01:SCAN HDFS [tpch.orders d]
   partitions=1/1 files=1 size=162.56MB row-size=8B cardinality=15
   predicates: d.o_custkey = 10
   runtime filters: RF000 -> d.o_custkey
====
# Selective filtering on master, broad on detail
# |M'| = 1
# |D'| = |D| * 0.33, uncorrelated with above
# |D.fk'| = |D.fk| * 0.33
# Since we assume containment: that the smaller key set
# is a subset of the larger one.
# Card = |D'| / max(1, |D.fk'|) = 5
select m.c_custkey, d.o_custkey
from tpch.customer m,
     tpch.orders d
where m.c_custkey = d.o_custkey
  and m.c_name = 'foo'
  and d.o_orderkey < 1234
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: d.o_custkey = m.c_custkey
|  runtime filters: RF000 <- m.c_custkey
|  row-size=54B cardinality=15
|
|--00:SCAN HDFS [tpch.customer m]
|     partitions=1/1 files=1 size=23.08MB row-size=38B cardinality=1
|     predicates: m.c_name = 'foo'
|
01:SCAN HDFS [tpch.orders d]
   partitions=1/1 files=1 size=162.56MB row-size=16B cardinality=495.00K
   predicates: d.o_orderkey < 1234
   runtime filters: RF000 -> d.o_custkey
====
# Selective filtering on detail, broad on master
# |M'| = |M| * 0.33
# |D'| = 1
# 1/3 chance that the detail finds its master, so card = 0 or 1
select m.c_custkey, d.o_custkey
from tpch.customer m,
     tpch.orders d
where m.c_custkey = d.o_custkey
  and m.c_name < 'foo'
  and d.o_orderkey = 10
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: m.c_custkey = d.o_custkey
|  runtime filters: RF000 <- d.o_custkey
|  row-size=54B cardinality=1
|
|--01:SCAN HDFS [tpch.orders d]
|     partitions=1/1 files=1 size=162.56MB row-size=16B cardinality=1
|     predicates: d.o_orderkey = 10
|
00:SCAN HDFS [tpch.customer m]
   partitions=1/1 files=1 size=23.08MB row-size=38B cardinality=49.50K
   predicates: m.c_name < 'foo'
   runtime filters: RF000 -> m.c_custkey
====
# M:N join
# |partsupp| = 800K
# |lineitem| = 6M
# NDV(ps_suppkey) = NDV(l_suppkey) = |suppkey| = 9.7K
# |lineitem >< partsupp| = (|lineitem| * |partsupp|) / |suppkey|
#                        = 800K * 6M / 10K = 80 * 600 = 480M
select t1.ps_suppkey, t2.l_suppkey
from tpch.partsupp t1,
     tpch.lineitem t2
where t1.ps_suppkey = t2.l_suppkey
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: t2.l_suppkey = t1.ps_suppkey
|  runtime filters: RF000 <- t1.ps_suppkey
|  row-size=16B cardinality=494.33M
|
|--00:SCAN HDFS [tpch.partsupp t1]
|     partitions=1/1 files=1 size=112.71MB row-size=8B cardinality=800.00K
|
01:SCAN HDFS [tpch.lineitem t2]
   partitions=1/1 files=1 size=718.94MB row-size=8B cardinality=6.00M
   runtime filters: RF000 -> t2.l_suppkey
====
# M:N join with filtering on smaller table
# NDV(availqty) = = |availqty| = 10K
# |partsupp'| = |partsupp| / |availqty|
#             = 800K / 10K = 80
# |lineitem >< partsupp'| = |lineitem| * |partsupp'| / |suppkey|
#                         = 6M * 80 / 10K = 48K
select t1.ps_suppkey, t2.l_suppkey
from tpch.partsupp t1,
     tpch.lineitem t2
where t1.ps_suppkey = t2.l_suppkey
  and t1.ps_availqty = 10
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: t2.l_suppkey = t1.ps_suppkey
|  runtime filters: RF000 <- t1.ps_suppkey
|  row-size=20B cardinality=48.20K
|
|--00:SCAN HDFS [tpch.partsupp t1]
|     partitions=1/1 files=1 size=112.71MB row-size=12B cardinality=78
|     predicates: t1.ps_availqty = 10
|
01:SCAN HDFS [tpch.lineitem t2]
   partitions=1/1 files=1 size=718.94MB row-size=8B cardinality=6.00M
   runtime filters: RF000 -> t2.l_suppkey
====
# M:N join with filtering on larger table
# NDV(l_partkey) = |l_partkey| = 200K
# |lineitem'| = |lineitem| / |l_partkey| = 6M / 200K = 30
# |lineitem' >< partsupp| = |lineitem'| * |partsupp| / |suppkey|
#                         = 30 * 800K / 10K = 2400
select t1.ps_suppkey, t2.l_suppkey
from tpch.partsupp t1,
     tpch.lineitem t2
where t1.ps_suppkey = t2.l_suppkey
  and t2.l_partkey = 10
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: t1.ps_suppkey = t2.l_suppkey
|  runtime filters: RF000 <- t2.l_suppkey
|  row-size=24B cardinality=2.47K
|
|--01:SCAN HDFS [tpch.lineitem t2]
|     partitions=1/1 files=1 size=718.94MB row-size=16B cardinality=30
|     predicates: t2.l_partkey = 10
|
00:SCAN HDFS [tpch.partsupp t1]
   partitions=1/1 files=1 size=112.71MB row-size=8B cardinality=800.00K
   runtime filters: RF000 -> t1.ps_suppkey
====
# M:N join with selective filtering on shared column
# |partsupp'| = |partsupp| / |suppkey| = 800K / 10K = 80
# But, filtering is done on the join column, so we want:
# |lineitem >< partsupp'| = |lineitem| * |partsupp'|
#                         = (80 * 6M) / 10K = 80 * 600 = 48K
select t1.ps_suppkey, t2.l_suppkey
from tpch.partsupp t1,
     tpch.lineitem t2
where t1.ps_suppkey = t2.l_suppkey
  and t1.ps_suppkey = 10
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: t2.l_suppkey = t1.ps_suppkey
|  runtime filters: RF000 <- t1.ps_suppkey
|  row-size=16B cardinality=50.68K
|
|--00:SCAN HDFS [tpch.partsupp t1]
|     partitions=1/1 files=1 size=112.71MB row-size=8B cardinality=82
|     predicates: t1.ps_suppkey = 10
|
01:SCAN HDFS [tpch.lineitem t2]
   partitions=1/1 files=1 size=718.94MB row-size=8B cardinality=618
   predicates: t2.l_suppkey = 10
   runtime filters: RF000 -> t2.l_suppkey
====
# M:N join with broad filtering on smaller table
# Most general join case
# |partsupp'| = |partsupp| * 0.33
#             = 800K / 3 = 267K
# |lineietem >< partsupp'| = |lineitem| * |partsupp'| / |suppkey|
#             = 267K * 6M / 10K = 160M
select t1.ps_suppkey, t2.l_suppkey
from tpch.partsupp t1,
     tpch.lineitem t2
where t1.ps_suppkey = t2.l_suppkey
  and t1.ps_availqty < 10
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: t2.l_suppkey = t1.ps_suppkey
|  runtime filters: RF000 <- t1.ps_suppkey
|  row-size=20B cardinality=163.13M
|
|--00:SCAN HDFS [tpch.partsupp t1]
|     partitions=1/1 files=1 size=112.71MB row-size=12B cardinality=264.00K
|     predicates: t1.ps_availqty < 10
|
01:SCAN HDFS [tpch.lineitem t2]
   partitions=1/1 files=1 size=718.94MB row-size=8B cardinality=6.00M
   runtime filters: RF000 -> t2.l_suppkey
====
# M:N join with broad filtering on larger table
# |lineitem'| = |lineitem| * 0.33 = 6M / 3 = 2M
# |lineitem' >< partsupp| = |lineitem'| * |partsupp| / |suppkey|
#             = 2M * 800K / 10K = 160M
select t1.ps_suppkey, t2.l_suppkey
from tpch.partsupp t1,
     tpch.lineitem t2
where t1.ps_suppkey = t2.l_suppkey
  and t2.l_partkey < 10
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: t2.l_suppkey = t1.ps_suppkey
|  runtime filters: RF000 <- t1.ps_suppkey
|  row-size=24B cardinality=163.13M
|
|--00:SCAN HDFS [tpch.partsupp t1]
|     partitions=1/1 files=1 size=112.71MB row-size=8B cardinality=800.00K
|
01:SCAN HDFS [tpch.lineitem t2]
   partitions=1/1 files=1 size=718.94MB row-size=16B cardinality=1.98M
   predicates: t2.l_partkey < 10
   runtime filters: RF000 -> t2.l_suppkey
====
# M:N join with filtering on both sides
# Most general join case
# |lineitem'| = |lineitem| * 0.33
# |partsup'| = |partsupp| * 0.33
# |suppkey'| = |suppkey| * 0.33
# |lineitem' >< partsupp'| = |lineitem'| * |partsupp'| / |suppkey'|
#              = 800K/3 * 6M/3 / 3.3K = 161M
# (Recall the containment assumption above.)
select t1.ps_suppkey, t2.l_suppkey
from tpch.partsupp t1,
     tpch.lineitem t2
where t1.ps_suppkey = t2.l_suppkey
  and t1.ps_availqty < 10
  and t2.l_partkey < 10
---- PLAN
PLAN-ROOT SINK
|
02:HASH JOIN [INNER JOIN]
|  hash predicates: t2.l_suppkey = t1.ps_suppkey
|  runtime filters: RF000 <- t1.ps_suppkey
|  row-size=28B cardinality=163.13M
|
|--00:SCAN HDFS [tpch.partsupp t1]
|     partitions=1/1 files=1 size=112.71MB row-size=12B cardinality=264.00K
|     predicates: t1.ps_availqty < 10
|
01:SCAN HDFS [tpch.lineitem t2]
   partitions=1/1 files=1 size=718.94MB row-size=16B cardinality=1.98M
   predicates: t2.l_partkey < 10
   runtime filters: RF000 -> t2.l_suppkey
====
# Three table 1:M join
# |customer| = 150K
# |customer.c_custkey| = |customer| = 150K
# |orders| = 1.5M
# |orders.o_orderKey| = 100K
# |lineitem| = 6M
# |lineitem.l_orderkey| = 1.5M
# |join| = |lineitem| = 6M
select c.c_name, o.o_orderkey, i.l_linenumber
from tpch.customer c,
     tpch.orders o,
     tpch.lineitem i
where c.c_custkey = o.o_custkey
  and o.o_orderkey = i.l_orderkey
---- PLAN
PLAN-ROOT SINK
|
04:HASH JOIN [INNER JOIN]
|  hash predicates: o.o_custkey = c.c_custkey
|  runtime filters: RF000 <- c.c_custkey
|  row-size=66B cardinality=5.76M
|
|--00:SCAN HDFS [tpch.customer c]
|     partitions=1/1 files=1 size=23.08MB row-size=38B cardinality=150.00K
|
03:HASH JOIN [INNER JOIN]
|  hash predicates: i.l_orderkey = o.o_orderkey
|  runtime filters: RF002 <- o.o_orderkey
|  row-size=28B cardinality=5.76M
|
|--01:SCAN HDFS [tpch.orders o]
|     partitions=1/1 files=1 size=162.56MB row-size=16B cardinality=1.50M
|     runtime filters: RF000 -> o.o_custkey
|
02:SCAN HDFS [tpch.lineitem i]
   partitions=1/1 files=1 size=718.94MB row-size=12B cardinality=6.00M
   runtime filters: RF002 -> i.l_orderkey
====
# Filter on customer table
# |join| = 1/3 of above = 2M
select c.c_name, o.o_orderkey, i.l_linenumber
from tpch.customer c,
     tpch.orders o,
     tpch.lineitem i
where c.c_custkey = o.o_custkey
  and o.o_orderkey = i.l_orderkey
  and c.c_name < 'foo'
---- PLAN
PLAN-ROOT SINK
|
04:HASH JOIN [INNER JOIN]
|  hash predicates: o.o_custkey = c.c_custkey
|  runtime filters: RF000 <- c.c_custkey
|  row-size=66B cardinality=2.90M
|
|--00:SCAN HDFS [tpch.customer c]
|     partitions=1/1 files=1 size=23.08MB row-size=38B cardinality=49.50K
|     predicates: c.c_name < 'foo'
|
03:HASH JOIN [INNER JOIN]
|  hash predicates: i.l_orderkey = o.o_orderkey
|  runtime filters: RF002 <- o.o_orderkey
|  row-size=28B cardinality=5.76M
|
|--01:SCAN HDFS [tpch.orders o]
|     partitions=1/1 files=1 size=162.56MB row-size=16B cardinality=1.50M
|     runtime filters: RF000 -> o.o_custkey
|
02:SCAN HDFS [tpch.lineitem i]
   partitions=1/1 files=1 size=718.94MB row-size=12B cardinality=6.00M
   runtime filters: RF002 -> i.l_orderkey
====
# Filter on orders table
# |join| = 1/3 of full join = 2M
select c.c_name, o.o_orderkey, i.l_linenumber
from tpch.customer c,
     tpch.orders o,
     tpch.lineitem i
where c.c_custkey = o.o_custkey
  and o.o_orderkey = i.l_orderkey
  and o.o_clerk < 'foo'
---- PLAN
PLAN-ROOT SINK
|
04:HASH JOIN [INNER JOIN]
|  hash predicates: o.o_custkey = c.c_custkey
|  runtime filters: RF000 <- c.c_custkey
|  row-size=93B cardinality=1.90M
|
|--00:SCAN HDFS [tpch.customer c]
|     partitions=1/1 files=1 size=23.08MB row-size=38B cardinality=150.00K
|
03:HASH JOIN [INNER JOIN]
|  hash predicates: i.l_orderkey = o.o_orderkey
|  runtime filters: RF002 <- o.o_orderkey
|  row-size=55B cardinality=1.90M
|
|--01:SCAN HDFS [tpch.orders o]
|     partitions=1/1 files=1 size=162.56MB row-size=43B cardinality=495.00K
|     predicates: o.o_clerk < 'foo'
|     runtime filters: RF000 -> o.o_custkey
|
02:SCAN HDFS [tpch.lineitem i]
   partitions=1/1 files=1 size=718.94MB row-size=12B cardinality=6.00M
   runtime filters: RF002 -> i.l_orderkey
====
# Filter on items table
# |join| = 1/3 of full join = 2M
select c.c_name, o.o_orderkey, i.l_linenumber
from tpch.customer c,
     tpch.orders o,
     tpch.lineitem i
where c.c_custkey = o.o_custkey
  and o.o_orderkey = i.l_orderkey
  and i.l_suppkey < 1234
---- PLAN
PLAN-ROOT SINK
|
04:HASH JOIN [INNER JOIN]
|  hash predicates: o.o_custkey = c.c_custkey
|  runtime filters: RF000 <- c.c_custkey
|  row-size=74B cardinality=1.98M
|
|--00:SCAN HDFS [tpch.customer c]
|     partitions=1/1 files=1 size=23.08MB row-size=38B cardinality=150.00K
|
03:HASH JOIN [INNER JOIN]
|  hash predicates: i.l_orderkey = o.o_orderkey
|  runtime filters: RF002 <- o.o_orderkey
|  row-size=36B cardinality=1.98M
|
|--01:SCAN HDFS [tpch.orders o]
|     partitions=1/1 files=1 size=162.56MB row-size=16B cardinality=1.50M
|     runtime filters: RF000 -> o.o_custkey
|
02:SCAN HDFS [tpch.lineitem i]
   partitions=1/1 files=1 size=718.94MB row-size=20B cardinality=1.98M
   predicates: i.l_suppkey < 1234
   runtime filters: RF002 -> i.l_orderkey
====
# Correlated filter on two columns
# |join| = Ave. line items per customer
# |lineitem| / |o.custkey| = 6M / 100K = 60
select c.c_name, o.o_orderkey, i.l_linenumber
from tpch.customer c,
     tpch.orders o,
     tpch.lineitem i
where c.c_custkey = o.o_custkey
  and o.o_orderkey = i.l_orderkey
  and c.c_custkey = 10
---- PLAN
PLAN-ROOT SINK
|
04:HASH JOIN [INNER JOIN]
|  hash predicates: o.o_custkey = c.c_custkey
|  runtime filters: RF000 <- c.c_custkey
|  row-size=66B cardinality=58
|
|--00:SCAN HDFS [tpch.customer c]
|     partitions=1/1 files=1 size=23.08MB row-size=38B cardinality=1
|     predicates: c.c_custkey = 10
|
03:HASH JOIN [INNER JOIN]
|  hash predicates: i.l_orderkey = o.o_orderkey
|  runtime filters: RF002 <- o.o_orderkey
|  row-size=28B cardinality=58
|
|--01:SCAN HDFS [tpch.orders o]
|     partitions=1/1 files=1 size=162.56MB row-size=16B cardinality=15
|     predicates: o.o_custkey = 10
|     runtime filters: RF000 -> o.o_custkey
|
02:SCAN HDFS [tpch.lineitem i]
   partitions=1/1 files=1 size=718.94MB row-size=12B cardinality=6.00M
   runtime filters: RF002 -> i.l_orderkey
====
# Correlated filter on two columns
# |join| = Ave. line items per customer
# |lineitem| / |o.orderkey| = 6M / 1.5M = 4
select c.c_name, o.o_orderkey, i.l_linenumber
from tpch.customer c,
     tpch.orders o,
     tpch.lineitem i
where c.c_custkey = o.o_custkey
  and o.o_orderkey = i.l_orderkey
  and o.o_orderkey = 10
---- PLAN
PLAN-ROOT SINK
|
04:HASH JOIN [INNER JOIN]
|  hash predicates: o.o_orderkey = i.l_orderkey
|  runtime filters: RF000 <- i.l_orderkey
|  row-size=66B cardinality=4
|
|--02:SCAN HDFS [tpch.lineitem i]
|     partitions=1/1 files=1 size=718.94MB row-size=12B cardinality=4
|     predicates: i.l_orderkey = 10
|
03:HASH JOIN [INNER JOIN]
|  hash predicates: c.c_custkey = o.o_custkey
|  runtime filters: RF002 <- o.o_custkey
|  row-size=54B cardinality=1
|
|--01:SCAN HDFS [tpch.orders o]
|     partitions=1/1 files=1 size=162.56MB row-size=16B cardinality=1
|     predicates: o.o_orderkey = 10
|     runtime filters: RF000 -> o.o_orderkey
|
00:SCAN HDFS [tpch.customer c]
   partitions=1/1 files=1 size=23.08MB row-size=38B cardinality=150.00K
   runtime filters: RF002 -> c.c_custkey
====
# Correlated filter on two pairs of columns
# |join| = Ave. line items per customer
# |lineitem| / |o.orderkey| = 6M / 1.5M = 4
select c.c_name, o.o_orderkey, i.l_linenumber
from tpch.customer c,
     tpch.orders o,
     tpch.lineitem i
where c.c_custkey = o.o_custkey
  and o.o_orderkey = i.l_orderkey
  and o.o_orderkey = 10
  and c.c_custkey = 20
---- PLAN
PLAN-ROOT SINK
|
04:HASH JOIN [INNER JOIN]
|  hash predicates: o.o_custkey = c.c_custkey
|  runtime filters: RF000 <- c.c_custkey
|  row-size=66B cardinality=4
|
|--00:SCAN HDFS [tpch.customer c]
|     partitions=1/1 files=1 size=23.08MB row-size=38B cardinality=1
|     predicates: c.c_custkey = 20
|
03:HASH JOIN [INNER JOIN]
|  hash predicates: i.l_orderkey = o.o_orderkey
|  runtime filters: RF002 <- o.o_orderkey
|  row-size=28B cardinality=4
|
|--01:SCAN HDFS [tpch.orders o]
|     partitions=1/1 files=1 size=162.56MB row-size=16B cardinality=1
|     predicates: o.o_orderkey = 10, o.o_custkey = 20
|     runtime filters: RF000 -> o.o_custkey
|
02:SCAN HDFS [tpch.lineitem i]
   partitions=1/1 files=1 size=718.94MB row-size=12B cardinality=4
   predicates: i.l_orderkey = 10
   runtime filters: RF002 -> i.l_orderkey
====
