# Predicate tests
# No predicate at all. Establishes cardinality baseline.
select * from tpch.customer
---- PLAN
PLAN-ROOT SINK
|
00:SCAN HDFS [tpch.customer]
   partitions=1/1 files=1 size=23.08MB row-size=218B cardinality=150.00K
====
# Predicate on a single value: card = |T|/ndv
# Unique key, NDV=|T|
select *
from tpch.customer c
where c.c_custkey = 10
---- PLAN
PLAN-ROOT SINK
|
00:SCAN HDFS [tpch.customer c]
   partitions=1/1 files=1 size=23.08MB row-size=218B cardinality=1
   predicates: c.c_custkey = 10
====
# Predicate on a single value: card = |T|/ndv
# Non-unique key, NDV=25
select *
from tpch.customer c
where c.c_nationkey = 10
---- PLAN
PLAN-ROOT SINK
|
00:SCAN HDFS [tpch.customer c]
   partitions=1/1 files=1 size=23.08MB row-size=218B cardinality=6.00K
   predicates: c.c_nationkey = 10
====
# OR'ed predicate, card = 2/ndv
select *
from tpch.customer c
where c.c_custkey = 10 OR c.c_custkey = 20
---- PLAN
PLAN-ROOT SINK
|
00:SCAN HDFS [tpch.customer c]
   partitions=1/1 files=1 size=23.08MB row-size=218B cardinality=2
   predicates: c.c_custkey IN (10, 20)
====
# OR'ed predicate, distinct columns
# card = max(card of each OR term)
select *
from tpch.customer c
where c.c_custkey = 10
   or c.c_nationkey = 10
---- PLAN
PLAN-ROOT SINK
|
00:SCAN HDFS [tpch.customer c]
   partitions=1/1 files=1 size=23.08MB row-size=218B cardinality=6.00K
   predicates: c.c_custkey = 10 OR c.c_nationkey = 10
====
# As above, but with smaller table to see effect
# NDV(id) = |T| = 8
# NDV(bool_val) = 2
# card = max(|T|/NDV(id),|T|/NDV(bool_val)) = max(1, 4)
# But done by adding cardinalities, which seems right, but is wrong
# Bug: IMPALA-8038
select *
from functional.alltypestiny t
where t.id = 10
   or t.bool_col = true
---- PLAN
PLAN-ROOT SINK
|
00:SCAN HDFS [functional.alltypestiny t]
   partitions=4/4 files=4 size=460B row-size=89B cardinality=5
   predicates: t.id = CAST(10 AS INT) OR t.bool_col = TRUE
====
# IN, card = x/ndv
select *
from tpch.customer c
where c.c_custkey in (10, 20, 30)
---- PLAN
PLAN-ROOT SINK
|
00:SCAN HDFS [tpch.customer c]
   partitions=1/1 files=1 size=23.08MB row-size=218B cardinality=3
   predicates: c.c_custkey IN (10, 20, 30)
====
# IN with duplicate values. Remove dups.
# Bug: IMPALA-8030
select *
from tpch.customer c
where c.c_custkey in (10, 20, 30, 30, 10, 20)
---- PLAN
PLAN-ROOT SINK
|
00:SCAN HDFS [tpch.customer c]
   partitions=1/1 files=1 size=23.08MB row-size=218B cardinality=6
   predicates: c.c_custkey IN (10, 20, 30, 30, 10, 20)
====
# OR on same value: card = 1/ndv
select *
from tpch.customer c
where c.c_custkey = 10 OR c.c_custkey = 10
---- PLAN
PLAN-ROOT SINK
|
00:SCAN HDFS [tpch.customer c]
   partitions=1/1 files=1 size=23.08MB row-size=218B cardinality=1
   predicates: c.c_custkey = 10
====
# OR on same value: card = 1/ndv
# Different expression order
# Bug: IMPALA-8030
select *
from tpch.customer c
where c.c_custkey = 10 OR 10 = c.c_custkey
---- PLAN
PLAN-ROOT SINK
|
00:SCAN HDFS [tpch.customer c]
   partitions=1/1 files=1 size=23.08MB row-size=218B cardinality=2
   predicates: c.c_custkey IN (10, 10)
====
# AND'ed predicate, card = 0
select *
from tpch.customer c
where c.c_custkey = 10 AND c.c_custkey = 20
---- PLAN
PLAN-ROOT SINK
|
00:EMPTYSET
====
# AND on same value: card = 1/ndv
select *
from tpch.customer c
where c.c_custkey = 10 AND c.c_custkey = 10
---- PLAN
PLAN-ROOT SINK
|
00:SCAN HDFS [tpch.customer c]
   partitions=1/1 files=1 size=23.08MB row-size=218B cardinality=1
   predicates: c.c_custkey = 10
====
# Not-equal, card = 1 - 1/ndv
# Use smaller table so effect is clear
# |T|=8, NDV=8
# Bug: IMPALA-8039
select *
from functional.alltypestiny
where id != 10
---- PLAN
PLAN-ROOT SINK
|
00:SCAN HDFS [functional.alltypestiny]
   partitions=4/4 files=4 size=460B row-size=89B cardinality=7
   predicates: id != 10
====
# Inequality. No useful stats. Assume sel = 0.33
# Fixed in: IMPALA-8037
select *
from tpch.customer c
where c.c_custkey < 1234
---- PLAN
PLAN-ROOT SINK
|
00:SCAN HDFS [tpch.customer c]
   partitions=1/1 files=1 size=23.08MB row-size=218B cardinality=49.50K
   predicates: c.c_custkey < 1234
====
# Inequality twice on same value. Remove duplicate.
select *
from tpch.customer c
where c.c_custkey < 1234
  and c.c_custkey < 1234
---- PLAN
PLAN-ROOT SINK
|
00:SCAN HDFS [tpch.customer c]
   partitions=1/1 files=1 size=23.08MB row-size=218B cardinality=49.50K
   predicates: c.c_custkey < 1234
====
# Inequality twice on same value, but reversed "direction". Remove duplicate.
select *
from tpch.customer c
where c.c_custkey < 1234
  and 1234 > c.c_custkey
---- PLAN
PLAN-ROOT SINK
|
00:SCAN HDFS [tpch.customer c]
   partitions=1/1 files=1 size=23.08MB row-size=218B cardinality=49.50K
   predicates: c.c_custkey < 1234
====
# Two inequalities of the same "direction" Assume only one applies.
# Bug: IMPALA-8031
select *
from tpch.customer c
where c.c_custkey < 1234
  and c.c_custkey < 2345
---- PLAN
PLAN-ROOT SINK
|
00:SCAN HDFS [tpch.customer c]
   partitions=1/1 files=1 size=23.08MB row-size=218B cardinality=28.44K
   predicates: c.c_custkey < 1234, c.c_custkey < 2345
====
# Two inequalities. No useful stats. Assume sel = 0.33^2
# But with effect of exponential-backoff
select *
from tpch.customer c
where c.c_custkey < 1234
  and c.c_nationkey < 100
---- PLAN
PLAN-ROOT SINK
|
00:SCAN HDFS [tpch.customer c]
   partitions=1/1 files=1 size=23.08MB row-size=218B cardinality=28.44K
   predicates: c.c_custkey < 1234, c.c_nationkey < 100
====
# Between. No useful stats. Should assume, say 0.16
# But, gets rewritten before computing selectivity,
# So same as AND'ed inequalities
# sel = 0.33 ^ 2 = 0.11, but Ramakrisnan and Gherke suggest 1/4
# Bug: IMPALA-TBD
select *
from tpch.customer c
where c.c_custkey between 1234 and 2345
---- PLAN
PLAN-ROOT SINK
|
00:SCAN HDFS [tpch.customer c]
   partitions=1/1 files=1 size=23.08MB row-size=218B cardinality=28.44K
   predicates: c.c_custkey <= 2345, c.c_custkey >= 1234
====
# Compound inequality that is the same as BETWEEN.
# Gets compouted as AND of inequalities.
# sel = 0.33 ^ 2 = 0.11
# But, these conditions are not independent, so a better estimate
# would be, say 1/6
# |<<< <<< ===| c > x
# |=== >>> >>>| c < y
# |<<< === >>>| c > x AND c < y
select *
from tpch.customer c
where c.c_custkey >= 1234 and c.c_custkey <= 2345
---- PLAN
PLAN-ROOT SINK
|
00:SCAN HDFS [tpch.customer c]
   partitions=1/1 files=1 size=23.08MB row-size=218B cardinality=28.44K
   predicates: c.c_custkey <= 2345, c.c_custkey >= 1234
====
# Between and redundant inequality
select *
from tpch.customer c
where c.c_custkey between 1234 and 2345
  and c.c_custkey <= 2345
---- PLAN
PLAN-ROOT SINK
|
00:SCAN HDFS [tpch.customer c]
   partitions=1/1 files=1 size=23.08MB row-size=218B cardinality=28.44K
   predicates: c.c_custkey <= 2345, c.c_custkey >= 1234
====
